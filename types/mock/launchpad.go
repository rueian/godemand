// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rueian/godemand/types (interfaces: Launchpad)

// Package types is a generated GoMock package.
package types

import (
	gomock "github.com/golang/mock/gomock"
	types "github.com/rueian/godemand/types"
	reflect "reflect"
)

// MockLaunchpad is a mock of Launchpad interface
type MockLaunchpad struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchpadMockRecorder
}

// MockLaunchpadMockRecorder is the mock recorder for MockLaunchpad
type MockLaunchpadMockRecorder struct {
	mock *MockLaunchpad
}

// NewMockLaunchpad creates a new mock instance
func NewMockLaunchpad(ctrl *gomock.Controller) *MockLaunchpad {
	mock := &MockLaunchpad{ctrl: ctrl}
	mock.recorder = &MockLaunchpadMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLaunchpad) EXPECT() *MockLaunchpadMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockLaunchpad) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockLaunchpadMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLaunchpad)(nil).Close))
}

// GetController mocks base method
func (m *MockLaunchpad) GetController(arg0 string) (types.Controller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetController", arg0)
	ret0, _ := ret[0].(types.Controller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetController indicates an expected call of GetController
func (mr *MockLaunchpadMockRecorder) GetController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetController", reflect.TypeOf((*MockLaunchpad)(nil).GetController), arg0)
}

// SetLaunchers mocks base method
func (m *MockLaunchpad) SetLaunchers(arg0 map[string]types.CmdParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLaunchers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLaunchers indicates an expected call of SetLaunchers
func (mr *MockLaunchpadMockRecorder) SetLaunchers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLaunchers", reflect.TypeOf((*MockLaunchpad)(nil).SetLaunchers), arg0)
}
